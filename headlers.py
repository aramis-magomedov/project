from db import User, Expense, Category, async_session
from FSM import Reg, Waste, Category_fsm
from kb.kb_inline import kb_options, kb_register_user
from kb.kb_reply import kb, kb_right, kb_cancel_FSM

import asyncio
from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.command import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from datetime import datetime


router = Router()


# @router.callback_query(F.data == "new_user")
# async def handle_btn1(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer("")
#     await state.set_state(Reg.name)
#     await callback.message.edit_text("–í–≤–µ–¥–∏ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")




async def get_dynamic_markup(user_id: int, session_maker) -> ReplyKeyboardMarkup:
    async with session_maker() as session:
        result = await session.execute(
            select(Category.name_categories).where(Category.user_id == user_id)
        )
        categories = result.scalars().all()

    if not categories:
        categories = ["–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ 2-3 –≤ —Ä—è–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä)
    keyboard = [[KeyboardButton(text=cat)] for cat in categories]
    keyboard.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –•—ç–Ω–¥–ª–µ—Ä—ã


# –í—ã–∑–æ–≤ –≥–ª–∞–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –±—É—Ä–≥–µ—Ä
@router.message(Command("main_menu"))
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=kb)



@router.message(F.text == 'üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤')
async def send_users_table(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(Expense))
        show_amounts = result.scalars().all()
        
        if not show_amounts:
            await message.answer("–†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ")
            return
            
        response = "üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n"
        sum_amount = 0 
        data_str = ''
        for show_amount in show_amounts:
            time_str = show_amount.created_at.strftime("%H:%M")

            if data_str != show_amount.created_at.strftime("%d.%m.%Y"):
                 data_str = show_amount.created_at.strftime("%d.%m.%Y")
                 response += f"–î–∞—Ç–∞: {data_str}\n\n" 

            response += f"–í—Ä–µ–º—è: {time_str}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {show_amount.category}\n –°—É–º–º–∞: {show_amount.amount}\n\n"
            sum_amount += show_amount.amount
        response += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: {sum_amount} —Ä—É–±."
        await message.answer(response)


# –†–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤–º–µ—Å—Ç–µ!", reply_markup=kb_register_user)
    await state.set_state(Reg.registry_or_auth)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
@router.callback_query(F.data == "register_callback")
async def cmd_start(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(registry_or_auth='registration')
    await callback.message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è')
    await state.set_state(Reg.name)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è
@router.callback_query(F.data == "auth_callback")
async def cmd_start(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(registry_or_auth='authentication')
    await state.set_state(Reg.name)
    await callback.message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è')
    
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è
@router.message(Reg.name)
async def cmd_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.surname)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é")


# –ü–æ—Ç–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ñ–∞–º–∏–ª–∏—é
@router.message(Reg.surname)
async def cmd_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(Reg.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(Reg.password)
async def cmd_surname(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()
    
    await message.answer(f'–ò–º—è: {data["name"]} –§–∞–º–∏–ª–∏—è: {data["surname"]} //n –ü–∞—Ä–æ–ª—å:{data["password"]}')
    await state.set_state(Reg.cheked)
    await message.answer("–í–µ—Ä–Ω–æ?", reply_markup=kb_right)

# –§–∏–∫—Å–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
@router.message(Reg.cheked)
async def show_main_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
    if data["registry_or_auth"] =='registration':
        if message.text == "üü¢ –î–∞,–≤—Å—ë –≤–µ—Ä–Ω–æ":
            async with async_session() as session:
                user = User(
                    id=message.from_user.id,
                    name=data["name"],
                    surname=data["surname"],
                    password=data["password"]
                )
                session.add(user)
                await session.commit()
                await message.answer(
                "\u2003–û—Ç–ª–∏—á–Ω–æüëç, –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –ø—É–Ω–∫—Ç–µ\n\"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã\"",
                reply_markup=kb)
                await state.clear()

        elif message.text == "üî¥ –ù–µ—Ç,–≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ":
            await message.answer("–ê —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏, —á—É—Ä–æ–∫?",reply_markup=kb)
            await message.answer("–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?")
            await state.clear()
            await state.set_state(Reg.registry_or_auth)
            await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è', reply_markup=kb_register_user)

        else:
            await message.answer('–¢–∞–º –≤–Ω–∏–∑—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–≤–µ —Ñ–∏–≥–Ω—é—à–∫–∏ –≤—ã—à–ª–∏, –∫—É–¥–∞ –Ω–∏–±—É–¥—å —Ç—É–¥–∞ —Ç—ã–∫–Ω–∏')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è
    if data['registry_or_auth'] == 'authentication':
            if (User.telegram_id == message.from_user.id and User.surname == data["surname"] 
                and User.name == data["name"] and User.password == data["password"]):
                await message.answer('–û–ª–∏—á–Ω–æ, –≤—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
            else:
                await state.clear()
                await message.answer('–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ')
                await message.answer('–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑',reply_markup=kb_register_user)
                await state.set_state(Reg.registry_or_auth)

                    
              
                        
                        





@router.message(F.text == "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
async def options(message: types.Message):
    await message.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_options)




@router.message(F.text == "üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def show_menu_expenses(message: types.Message, bot: Bot):
    print("–•–µ–Ω–¥–ª–µ—Ä üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª")

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ –µ–≥–æ Telegram ID
        user = await session.execute(select(User).where(User.id == message.from_user.id))
        user = user.scalar_one_or_none()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        
        if user and user.IQ_user == 50:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 50
            print("–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IQ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞")
            await message.answer(
                "–Ø —á–µ—Å—Ç–Ω–æ –ø–æ –ø—Ä–∏–∫–æ–ª—É —ç—Ç—É —Å—É–µ—Ç—É –¥–æ–±–∞–≤–∏–ª. –¢—ã –≤–æ–æ–±—â–µ —Å—é–¥–∞ –∑–∞—á–µ–º –Ω–∞–∂–∞–ª(–∞)? "
                "–ö–∞–∫ —Ç—ã —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª? "
                "–ï—Ä—É–Ω–¥–æ–π –Ω–µ –∑–∞–Ω–∏–º–∞–π—Å—è, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞."
            )
            user.IQ_user = 49
            await session.commit()
            return



        if user and user.IQ_user == 49:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 49
            print("–í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IQ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞")
            await message.answer("–£—Å–ø–æ–∫–æ–π—Å—è –≥–æ–≤–æ—Ä—é. –•–æ—Ç—å —á—Ç–æ-—Ç–æ –≤ –≥–æ–ª–æ–≤–µ –¥–µ—Ä–∂–∏")
            user.IQ_user = 48
            await session.commit()
            return
    
        if user and user.IQ_user == 48:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 48
            await message.answer("–ö–∞–∫ —á–µ—Ä—Ç –Ω–µ –≤–µ–¥–∏ —Å–µ–±—è, —Ö–≤–∞—Ç–∏—Ç –Ω–∞–∂–∏–º–∞—Ç—å —Å—é–¥–∞")
            user.IQ_user = 47
            await session.commit()
            return
        
        if user and user.IQ_user == 47:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 47
            await message.answer("–¢—ã —á–µ —Ö–æ—á–µ—à—å? –ò–¥–∏ –¥–µ–ª–æ–º –∑–∞–π–º–∏—Å—å, —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–≤–æ–∏—Ö –ø–æ—Ä–∞–¥—É–π –∏–ª–∏ –ø—Ä–æ–≥—É–ª—è–π—Å—è, —á–µ–º —Ü–µ–ª—ã–π –¥–µ–Ω—å –∑–∞ –∫–æ–º–ø–æ–º —Å–∏–¥–µ—Ç—å –µ—Ä—É–Ω–¥–æ–π —Å—Ç—Ä–∞–¥–∞—Ç—å")
            user.IQ_user = 46
            await session.commit()
            return
        
        if user and user.IQ_user == 46:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 46
            await message.answer("–î—É—à—É —Ç–≤–æ—é –º–æ—Ç–∞–ª, –Ω–µ –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞")
            user.IQ_user = 45
            await session.commit()
            return
        
        if user and user.IQ_user == 45:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 45
            await message.answer("–¢–≤–æ–π –Ω–æ—Å —Ç–æ–ø—Ç–∞–ª! –ù–µ –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞!")
            user.IQ_user = 44
            await session.commit()
            return
        
        if user and user.IQ_user == 44:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ IQ = 44
            await message.answer("–ï—Å–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è –Ω–µ—á–µ–º - —Å–∫–∞–∂–∏, —Ç–∞–º –º–Ω–µ –æ–≥–æ—Ä–æ–¥ –Ω–∞–¥–æ –≤—Å–∫–æ–ø–∞—Ç—å")
            user.IQ_user = 43
            await session.commit()
            return

        if user and user.IQ_user == 43:
            await message.answer("–î–∞–≤–∞–π —Ç–æ–≥–¥–∞ —Å–∞–º —Ä–µ–∞–ª–∏–∑—É–µ—à—å —ç—Ç—É —Ñ—É–∫—Ü–∏—é, –µ—Å–ª–∏ —Ç—ã –∞—à–∞–ª–µ—Ç—å –∫–∞–∫–æ–π —É–º–Ω—ã–π")
            user.IQ_user = 42
            await session.commit()
            return
        
        if user and user.IQ_user == 42:
            await message.answer("–ù–∏ —Ö–∞—Ö–∞ —É–∂–µ, –ø–æ –∏–¥–µ–µ")
            user.IQ_user = 41
            await session.commit()
            return
        
        if user and user.IQ_user == 41:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 40
            await session.commit()
            return
        
        if user and user.IQ_user == 40:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 39
            await session.commit()
            return
        
        if user and user.IQ_user == 39:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 38
            await session.commit()
            return
        
        if user and user.IQ_user == 38:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 37
            await session.commit()
            return
        
        if user and user.IQ_user == 37:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 36
            await session.commit()
            return
        
        if user and user.IQ_user == 36:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 35
            await session.commit()
            return

        if user and user.IQ_user == 35:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 34
            await session.commit()
            return
        
        if user and user.IQ_user == 34:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            user.IQ_user = 33
            await session.commit()
            return
        
        if user and user.IQ_user == 33:
            await message.answer("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö–∞–∂–µ—Ç—Å—è –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–≤–æ–µ –º—É–∂—Å–∫–æ–µ")
            user.IQ_user = 32
            await session.commit()
            return
        
        if user and user.IQ_user == 32:
            await message.answer("–ù–µ—É–≥–æ–º–æ–Ω—ã–π —Ç—ã –≤–Ω–∞—Ç—É—Ä–µ")
            user.IQ_user = 31
            await session.commit()
            return
        
        if user and user.IQ_user == 31:
            await message.answer("–¢–µ–±—è —Ä–æ–Ω—è–ª–∏ —Ä–∞–∑–æ–∫ –≤ –¥–µ—Ç—Å–≤–µ –æ–± –∫–∞—Ñ–µ–ª—å, –¥–∞?")
            user.IQ_user = 30
            await session.commit()
            return
        
        if user and user.IQ_user == 30:
            await message.answer("–¢–µ–±—è —Ä–æ–Ω—è–ª–∏ –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ—Ç—Å–≤–µ –æ–± –∫–∞—Ñ–µ–ª—å, –¥–∞?")
            user.IQ_user = 29
            await session.commit()
            return
        
        if user and user.IQ_user == 29:
            await message.answer("–í–∞–π –±–ª–∏–Ω, —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —Ä–æ–Ω—è–ª–∏ —á—Ç–æ-–ª–∏?")
            user.IQ_user = 28
            await session.commit()
            return
        
        if user and user.IQ_user == 28:
            await message.answer("–≠, –æ—Å—Ç–∞–≤—å –¥–∞ —É–∂–µ —ç—Ç—É –∫–Ω–æ–ø–∫–∫—É!")
            user.IQ_user = 27
            await session.commit()
            return
        
        if user and user.IQ_user == 27:
            await message.answer("–Ø —Å–µ–π—á–∞—Å —É–¥–∞–ª—é —Ç–µ–±—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø—è—Ç—å —Å–µ–∫—É–Ω–¥ —è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —É–¥–∞–ª—é")
            user.IQ_user = 26
            await session.commit()
            return
        
        if user and user.IQ_user == 26:
            await message.answer("–ù–æ–º–µ—Ä –∫–∞ –¥–∞–π —Å–≤–æ–π —Å—é–¥–∞, —á–µ—Ä—Ç")
            user.IQ_user = 25
            await session.commit()
            return

        if user and user.IQ_user == 25:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await message.answer("–ù–æ–º–µ—Ä –≥–æ–≤–æ—Ä—é –¥–∞–π —Å–≤–æ–π")
            user.IQ_user = 24
            await session.commit()
            return



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
@router.message(F.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def show_menu_expenses(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞", reply_markup=kb_cancel_FSM)
    await state.set_state(Waste.sum_waste)


@router.message(Waste.sum_waste)
async def process_sum(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
       await state.clear()
       await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb)
    else:
        amount = float(message.text)
        await state.update_data(sum_waste=amount)
        await state.set_state(Waste.category)

        dynamic_markup = await get_dynamic_markup(message.from_user.id, async_session)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞", reply_markup=dynamic_markup)



@router.message(Waste.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
       await state.clear()
       await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb)

    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î
    async with async_session() as session:
        expense = Expense(
            user_id=message.from_user.id,
            category=message.text,
            amount=data["sum_waste"]
        )
        session.add(expense)
        await session.commit()
    
    await message.answer(
        f'''{datetime.now().strftime("%d/%m/%Y %H:%M")}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}
–°—É–º–º–∞: {data["sum_waste"]}''',
        reply_markup=kb
    )
    await state.clear()






@router.callback_query(F.data.startswith("callback_"))
async def handle_callback(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å (some_id)
    name_cat = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    
    async with async_session() as session:
        # 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å
        result = await session.execute(
            select(Category).where(Category.name_categories == name_cat, Category.user_id == user_id)
        )
        item = result.scalar_one_or_none()

        # 2. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not item:
        await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

        # 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await session.delete(item)
    await session.commit()
    
    await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è  \"{name_cat}\"  —É–¥–∞–ª–µ–Ω–∞", show_alert=True)







@router.callback_query(F.data == "new_category")
async def show_categories(callback, state: FSMContext):
    await callback.answer("")
    await state.set_state(Category_fsm.cats)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup = kb_cancel_FSM)



@router.message(Category_fsm.cats)
async def add_category(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
       await state.clear()
       await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb)
    else:
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing = await session.execute(
                select(Category).where(
                    Category.name_categories == message.text,
                    Category.user_id == message.from_user.id
                )
            )
            

            if existing.scalar():
                await message.answer("–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return 
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(
                name_categories=message.text,
                user_id=message.from_user.id
            )
            session.add(new_category)
            await session.commit()
        
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb)
        await state.clear()








import matplotlib.pyplot as plt 
from io import BytesIO
from aiogram.types import BufferedInputFile
from sqlalchemy import func


@router.callback_query(F.data == "show_diagram")
async def send_pie_chart(callback: types.CallbackQuery):
    async with async_session() as session:
        result = await session.execute(
            select(Expense.category, func.sum(Expense.amount))
            .where(Expense.user_id == callback.from_user.id)
            .group_by(Expense.category)
        )
        data = result.all()

        if not data:
            await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            return

        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        labels = [item[0] for item in data]
        sizes = [float(item[1]) for item in data]
        
        # 3. –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        buf = BytesIO()
        plt.figure(figsize=(10, 8))
        plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True)
        plt.title('–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –¥–ª—è aiogram 3.x)
        await callback.message.answer_photo(
            types.BufferedInputFile(buf.read(), filename='expenses.png')
        )
        buf.close()







# üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
@router.message(F.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
async def send_users_table(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(Expense).where(Expense.user_id == message.from_user.id))
        db_object = result.scalars().all()
        for expense in db_object:
                print(f"‚úÖ ‚úÖ ‚úÖ ‚úÖ  {expense.__dict__}‚úÖ ‚úÖ ‚úÖ ‚úÖ ")